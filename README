cbnaya
geller


=============================
=      Files description    =
=============================
Sjavac.java - 	The main class, which all the others, and validates whether a 
				s-java file is alright.

Token.java - 		Representing a token in the s-java language.
Tokenizer.java - 	An iterator of s-java tokens.
Position.java - 	Representing a location in a file.

Parser.java - 					Parses a s-java file and returns an abstract 
								syntax tree representing the code.
ComplexItrator.java - 			An iterator which keeps its last returned 
								value. 
OtherTokenTypeNeedHere.java - 	Thrown when expecting a specific token, but 
								another appears.
NotAllowedInThisContext.java - 	Thrown if a token unrelated to the context was 
								parsed. 
InvalidIdentityName.java - 		Thrown when trying to name a method or a 
								variable with invalid name.


AstNode.java - 			Representing a node in an abstract syntax tree.
ScopeNode.java -		A code block like global, if, while and methods.
GlobalNode.java - 		Representing the AST root, the global code scope.
MethodNode.java - 		A method declaration.
ArgumentNode.java -		An argument of a method.
ConditionalNode.java - 	An inner block, starts with a condition.
IfNode.java, WhileNode.java - Conditional nodes. 
ExpressionNode.java - 	Representing an expression.
LiteralExpressionNode.java - 	A specific value expression, like a number, 
								true, a character, etc..
VarExpressionNode.java - 		An expression of referencing a name of a 
								variable.
BinaryOpNode.java - 	A node of boolean binary oprator, consiting two 
						expressions.
AndNode.java - 			"&&" binary operator.
OrNode.java - 			"||" binary operator.
VarDeclaration.java - 	Representing a declaration of a variable.
AssignmentNode.java - 	Representing an assignment of a variable with an 
						expression.  
CallMethodNode.java - 	A node for calling a method.
ReturnNode.java - 		Representing a return statement.

AstValidator.java - 

=============================
=          Design           =
=============================
Our design suggests several steps for validating a s-java file. First, we 
defined the different tokens of the language. This way, we could split a file 
into the different tokens, and might easily add new words and types, by adding 
some new regex patterns.
Then we created nodes for AST (Abstract Syntax Tree), which represents the 
syntactic structure of source code bijectively (In our implementation, assuming 
the order of method declarations does not matter), so each code could have only 
one way to be interpreted as a tree and vice versa. A tree for a code with bad 
syntax could not be created, but referencing a method or a variable from a 
different part of the code with bad typing or number of arguments is handled 
after a tree exists.
Later, we wrote a parser which parses each token in a file and converts them 
into the AST nodes accordingly, and throws an exeption if it finds a syntactic 
error.
At last, we made a ...

We could have used regex for full lines, which will save us the need of 
validating lines break and and will allow us to know the specific context for 
each line, but ...
We could have also read the file more directly, instead of turning it into a 
tree and validating it back and forth. However, the need to allow a method to 
call predifined methods and global variables made us to think of way of parsing 
the code as it is, and then access it again easily enough.
We had a dilemma regarding checking the AST by the nodes themself, but decided 
to do it externally, to keep the modularity between ... , which also lets us to 
keep the state as field of the validator and not passing it as a parameter each 
recursive call inside a node.

To add new variable types, we need to add new types of enums - at the regex 
patterns and at the expression types. For example, float numbers will require 
us to add 2 patterns - "float\\b" and ""-?\\d+\\.\\d+f", and the expression 
type "FLOAT". In addition, we should also update the 
ExpressionNode.ExpressionType.accept method, to allow conversions between the 
new and the existing types. If a lot of conversions are allowed in the expanded 
language, we might think of a new way for accept() to work, since the 
relatively-simple boolean expression it returns will get ugly. The problem is 
java does not allow us to keep a list of types for each type at the enum 
declaration.

Supporting switch statements means we need to add tokens for switch, case, 
default and break. We need to create SwitchNode, with a List<CaseNode> as its 
children, when CaseNode has a variable expression and a literal expression to 
be compared, and a body. Each ScopeNode will be connected to previous scopes 
since the last break statement. Parsing and validating will be updated 
accordingly, verifying the syntax is as required before creating this node and 
the type of the variable is accepted by BOOLEAN.


=============================
=  Implementation details   =
=============================
Each token object kept its original position in the file, which was passed to 
the AST nodes, so when a problem is found it is easy to find where it happened 
and report this position in the message of the thrown exception. It's a lot 
easier to pass all the data of a problem back to the main module using an 
exception object, so we used this mechanism as advised.
